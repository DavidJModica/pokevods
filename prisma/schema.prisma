// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Deck {
  id          Int       @id @default(autoincrement())
  name        String
  archetype   String    // e.g., "Charizard ex", "Gardevoir ex", "Lost Zone"
  format      String    // e.g., "Standard", "Expanded", "Unlimited"
  description String?
  deckList    String?   // Actual decklist text
  icon        String?   // Path to deck icon image (deprecated - use icons)
  icons       String?   // JSON array of icon paths
  hidden      Boolean   @default(false) // Hide deck from main view
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  resources   Resource[]
  matchupChapters Chapter[] @relation("OpposingDeck")
  matchups    Matchup[]  @relation("MatchupOpponent")
}

model Author {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  slug           String    @unique // URL-friendly version of name
  email          String?   @unique // For author login
  password       String?   // Hashed password (bcrypt)
  bio            String?
  profilePicture String?   // URL to profile picture
  youtube        String?
  twitter        String?
  twitch         String?
  discord        String?
  website        String?
  metafy         String?   // Metafy profile URL
  lastScanDate   DateTime? // Last time channel was scanned for new videos
  lastVideoDate  DateTime? // Publication date of most recent video found
  canCreateGuides Boolean  @default(false) // Grant guide creation permission
  isVerified      Boolean  @default(false) // Email verified
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  resources      Resource[]
}

model Resource {
  id              Int      @id @default(autoincrement())
  deckId          Int?
  deck            Deck?    @relation(fields: [deckId], references: [id], onDelete: Cascade)

  type            String   // "Guide", "Gameplay", "Guide and Gameplay", "Hosted Guide"
  title           String
  url             String?  // Nullable - hosted guides don't need external URL
  author          String?  // Legacy text field
  authorId        Int?
  authorProfile   Author?  @relation(fields: [authorId], references: [id])
  platform        String?  // "YouTube", "Metafy", "Reddit", "PokeVods Hosted", "Other"
  accessType      String   @default("Free") // "Free" or "Paid"
  publicationDate DateTime?
  thumbnail       String?  // YouTube thumbnail URL
  decklist        String?  // Optional decklist text
  status          String   @default("approved") // "pending" or "approved"

  // Hosted Guide Fields
  isHosted        Boolean  @default(false)
  slug            String?  @unique
  publishStatus   String   @default("draft") // "draft" or "published"
  views           Int      @default(0)
  lastEditedBy    Int?

  chapters        Chapter[]
  guideSections   GuideSection[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([deckId, publicationDate])
  @@index([authorId, publicationDate])
  @@index([status])
  @@index([type])
  @@index([platform])
  @@index([publicationDate])
  @@index([url])
  @@index([isHosted])
  @@index([slug])
  @@index([publishStatus])
}

model Chapter {
  id              Int      @id @default(autoincrement())
  resourceId      Int
  resource        Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  timestamp       String   // e.g., "12:34" or "1:23:45"
  title           String?
  chapterType     String   // "Guide" or "Matchup"

  // Only for Matchup type chapters
  opposingDeckId  Int?
  opposingDeck    Deck?    @relation("OpposingDeck", fields: [opposingDeckId], references: [id])

  createdAt       DateTime @default(now())

  @@index([resourceId]) // For fetching chapters by resource
  @@index([opposingDeckId]) // For finding matchup chapters by opposing deck
}

model RejectedVideo {
  id              Int      @id @default(autoincrement())
  url             String   @unique // The video URL that was rejected
  title           String?  // Title when it was rejected
  reason          String?  // Why it was rejected (optional)
  rejectedAt      DateTime @default(now())
}

model GuideSection {
  id              Int      @id @default(autoincrement())
  resourceId      Int
  resource        Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  sectionType     String   // "intro", "decklist", "card-explanations", "possible-inclusions", "notable-exclusions", "matchups", "custom"
  title           String
  content         String?  // Rich text content (HTML from TipTap)
  order           Int

  images          GuideImage[]
  matchups        Matchup[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([resourceId, order])
  @@index([sectionType])
}

model GuideImage {
  id              Int          @id @default(autoincrement())
  sectionId       Int
  section         GuideSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  url             String       // Vercel Blob URL
  altText         String?
  caption         String?
  width           Int?
  height          Int?
  order           Int

  createdAt       DateTime     @default(now())

  @@index([sectionId, order])
}

model Matchup {
  id              Int          @id @default(autoincrement())
  sectionId       Int
  section         GuideSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  opposingDeckId  Int
  opposingDeck    Deck         @relation("MatchupOpponent", fields: [opposingDeckId], references: [id])

  winPercentage   Float?
  difficulty      String?      // "Favored", "Even", "Unfavored", "Very Unfavored"
  notes           String?      // Matchup strategy notes
  keyCards        Json?        // [{cardName, importance, notes}]

  order           Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([sectionId, order])
  @@index([opposingDeckId])
}
