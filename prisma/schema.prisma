// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Deck {
  id          Int       @id @default(autoincrement())
  name        String
  archetype   String    // e.g., "Charizard ex", "Gardevoir ex", "Lost Zone"
  format      String    // e.g., "Standard", "Expanded", "Unlimited"
  description String?
  deckList    String?   // Actual decklist text
  icon        String?   // Path to deck icon image (deprecated - use icons)
  icons       String?   // JSON array of icon paths
  hidden      Boolean   @default(false) // Hide deck from main view
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  resources   Resource[]
  matchupChapters Chapter[] @relation("OpposingDeck")
}

model Author {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  slug           String    @unique // URL-friendly version of name
  bio            String?
  profilePicture String?   // URL to profile picture
  youtube        String?
  twitter        String?
  twitch         String?
  discord        String?
  website        String?
  metafy         String?   // Metafy profile URL
  lastScanDate   DateTime? // Last time channel was scanned for new videos
  lastVideoDate  DateTime? // Publication date of most recent video found
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  resources      Resource[]
}

model Resource {
  id              Int      @id @default(autoincrement())
  deckId          Int?
  deck            Deck?    @relation(fields: [deckId], references: [id], onDelete: Cascade)

  type            String   // "Guide", "Gameplay", or "Guide and Gameplay"
  title           String
  url             String
  author          String?  // Legacy text field
  authorId        Int?
  authorProfile   Author?  @relation(fields: [authorId], references: [id])
  platform        String?  // "YouTube", "Metafy", "Reddit", "Other"
  accessType      String   @default("Free") // "Free" or "Paid"
  publicationDate DateTime?
  thumbnail       String?  // YouTube thumbnail URL
  decklist        String?  // Optional decklist text
  status          String   @default("approved") // "pending" or "approved"

  chapters        Chapter[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([deckId, publicationDate]) // For fetching deck resources sorted by date
  @@index([authorId, publicationDate]) // For fetching author resources sorted by date
  @@index([status]) // For filtering pending/approved resources
  @@index([type]) // For filtering by resource type
  @@index([platform]) // For filtering by platform
  @@index([publicationDate]) // For date-based queries
  @@index([url]) // For checking if video already exists
}

model Chapter {
  id              Int      @id @default(autoincrement())
  resourceId      Int
  resource        Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  timestamp       String   // e.g., "12:34" or "1:23:45"
  title           String?
  chapterType     String   // "Guide" or "Matchup"

  // Only for Matchup type chapters
  opposingDeckId  Int?
  opposingDeck    Deck?    @relation("OpposingDeck", fields: [opposingDeckId], references: [id])

  createdAt       DateTime @default(now())

  @@index([resourceId]) // For fetching chapters by resource
  @@index([opposingDeckId]) // For finding matchup chapters by opposing deck
}

model RejectedVideo {
  id              Int      @id @default(autoincrement())
  url             String   @unique // The video URL that was rejected
  title           String?  // Title when it was rejected
  reason          String?  // Why it was rejected (optional)
  rejectedAt      DateTime @default(now())
}
